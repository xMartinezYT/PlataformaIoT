generator client {
  provider = "prisma-client-js"
  output   = ".prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  TECHNICIAN
  USER
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
  INACTIVE
}

enum AlertLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  IGNORED
}

enum AutomationRuleStatus {
  ACTIVE
  INACTIVE
  TESTING
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  devices      Device[]
  alerts       Alert[]
  activities   Activity[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  devices     Device[]
}

model Device {
  id             String       @id @default(cuid())
  name           String
  description    String?
  serialNumber   String       @unique
  model          String?
  manufacturer   String?
  status         DeviceStatus @default(OFFLINE)
  location       String?
  latitude       Float?
  longitude      Float?
  installDate    DateTime?
  lastMaintenance DateTime?
  categoryId     String?
  userId         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  category       Category?    @relation(fields: [categoryId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])
  readings       DeviceReading[]
  alerts         Alert[]
  maintenances   Maintenance[]
  automationRules AutomationRule[]
}

model DeviceReading {
  id        String   @id @default(cuid())
  deviceId  String
  timestamp DateTime @default(now())
  type      String
  value     Float
  unit      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model Alert {
  id        String      @id @default(cuid())
  deviceId  String
  userId    String?
  title     String
  message   String
  severity  AlertLevel  @default(INFO)
  status    AlertStatus @default(ACTIVE)
  timestamp DateTime    @default(now())
  resolvedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  device    Device      @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id])
}

model Maintenance {
  id          String    @id @default(cuid())
  deviceId    String
  title       String
  description String
  scheduledAt DateTime
  completedAt DateTime?
  technician  String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  device      Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model AutomationRule {
  id          String               @id @default(cuid())
  name        String
  description String?
  deviceId    String
  condition   String
  action      String
  status      AutomationRuleStatus @default(ACTIVE)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  device      Device               @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
